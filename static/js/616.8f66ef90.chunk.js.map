{"version":3,"file":"static/js/616.8f66ef90.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","redux/Phonebook.redux/selector.js","components/ContactList/ContactList.jsx","components/FilterContacts/FilterContacts.jsx","components/Page/PhoneBoook/Phonebook.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setContactsData } from 'redux/Phonebook.redux/operations';\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(state => state.phonebook.items);\n  const dispatch = useDispatch();\n  const handelSubmitTow = event => {\n    event.preventDefault();\n    handleSubmit(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  const onChangeName = event => {\n    setName(event.target.value);\n  };\n  const onChangeNumber = event => {\n    setNumber(event.target.value);\n  };\n  const handleSubmit = (name, number) => {\n    if (contacts.some(contact => contact.name === name)) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(setContactsData({ name, number, id: nanoid() }));\n  };\n\n  return (\n    <>\n      <form onSubmit={handelSubmitTow}>\n        <label htmlFor=\"input\">Name</label>\n        <input\n          value={name}\n          onChange={onChangeName}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label htmlFor=\"input\">Number</label>\n        <input\n          value={number}\n          onChange={onChangeNumber}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <button type=\"submit\">Add conact</button>\n      </form>\n    </>\n  );\n};\n","export const getFilteredContacts = state => {\n  return state.phonebook.items.filter(contact =>\n    contact.name.toLowerCase().includes(state.filter.filter.toLowerCase())\n  );\n};\nexport const getFilter = state => state.filter.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactsData } from 'redux/Phonebook.redux/operations';\nimport { getFilteredContacts } from 'redux/Phonebook.redux/selector';\nexport const ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n  const handleDeleteUser = id => {\n    dispatch(deleteContactsData(id));\n  };\n\n  return (\n    <>\n      <ul>\n        {contacts.map(contact => (\n          <li key={contact.id}>\n            <p>{contact.name}</p>\n            <p>{contact.number}</p>\n            <button onClick={() => handleDeleteUser(contact.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilterAction } from 'redux/Phonebook.redux/FiltrSlice';\nimport { getFilter } from 'redux/Phonebook.redux/selector';\nexport const FilterContacts = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChangeName = event => {\n    dispatch(changeFilterAction(event.target.value));\n  };\n  return (\n    <>\n      <h2>Contacts</h2>\n      <label htmlFor=\"input\">Find contacts by name</label>\n      <input type=\"text\" name=\"filter\" onChange={onChangeName} value={filter} />\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { FilterContacts } from 'components/FilterContacts/FilterContacts';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getContactsData } from 'redux/Phonebook.redux/operations';\n\nfunction Phonebook() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsData());\n  }, [dispatch]);\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: '#010101',\n          gap: 10,\n        }}\n      >\n        <ContactForm />\n        <FilterContacts />\n        <ContactList />\n      </div>\n    </>\n  );\n}\nexport default Phonebook;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","phonebook","items","dispatch","useDispatch","handleSubmit","some","contact","alert","setContactsData","onSubmit","event","preventDefault","htmlFor","value","onChange","target","type","pattern","title","required","getFilteredContacts","filter","toLowerCase","includes","getFilter","ContactList","map","onClick","deleteContactsData","FilterContacts","changeFilterAction","useEffect","getContactsData","style","display","flexDirection","justifyContent","alignItems","color","gap"],"sourceRoot":""}